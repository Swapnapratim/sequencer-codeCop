{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "17dabb8ce1ba93c389ef9be0d76712144969f3abba0054b1e66dcb02982e2e9f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:11",
        "version": {
          "withMetadata": "974f037b2ce0b3c2796eec8e50b86d680db9d2b9c1865ba5ce199315795e6ed3",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:14",
        "version": {
          "withMetadata": "8820615218e454d46fe8711cda35a510d19141dc4a1f39289a9cc78850f4ebbb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol:StringsUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:9",
        "version": {
          "withMetadata": "a6fcdc43142110b15057ebd622e3985ca8c2f61cf8e8d5e3b19d9d67fc1192f2",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "75b7900fb8b724234801d081bf73dd15cc689412d154dde5492f7d7b66da1e7c",
          "withoutMetadata": "84712d08304a5d0fa3abce5c14365ed597e57db00edf06252fa4a02fc85d18d6",
          "linkedWithoutMetadata": "84712d08304a5d0fa3abce5c14365ed597e57db00edf06252fa4a02fc85d18d6"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "f8dc1fc4828432167a1595663ac9ae20242914b5c59d18665789156a87e48bbf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "fb4dbb1e39d9317df0f148874c89e29b673969b8cb0d7d5a761922f15623271b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:11",
        "version": {
          "withMetadata": "becda904557214a5bda749a6125c1fea671e1fc0efbbbc17e8ed431f50e4db2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "901d61d1131a847e6f21eae48cb42f84c3ed84e499dcf371e3de65fd28e9adc5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof": {
        "src": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:20",
        "version": {
          "withMetadata": "92d2f59969a913134fd70bbe5630f8dbf55cac9431ef138215de92829d34fc67",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "2d1a2b4284b1012814103d65436903d8922f01e47a1bb719b63c271ea0cbd56b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ArbAirdrop.sol:ArbAirdrop": {
        "src": "contracts/ArbAirdrop.sol:11",
        "version": {
          "withMetadata": "6862d184f9bff75de3b90d0649f91c5c0490ccd231fbd6c0ca5f8799b11b5feb",
          "withoutMetadata": "ebd0345fba3839ff13cbc9be2b9c8660c8bbb3a2467ad05e5d7c5cbcdc9dd407",
          "linkedWithoutMetadata": "ebd0345fba3839ff13cbc9be2b9c8660c8bbb3a2467ad05e5d7c5cbcdc9dd407"
        },
        "inherit": [
          "contracts/interfaces/IArbAirdrop.sol:IArbAirdrop",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol:MerkleProof",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initialize(address,address)",
          "registerMerkleRoot(uint32,bytes32)",
          "claim(struct IArbAirdrop.ClaimProof[])",
          "getClaimed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "token",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "ArbAirdrop",
              "src": "contracts/ArbAirdrop.sol:12"
            },
            {
              "label": "sanctions",
              "offset": 0,
              "slot": "102",
              "type": "t_address",
              "contract": "ArbAirdrop",
              "src": "contracts/ArbAirdrop.sol:13"
            },
            {
              "label": "pastWeeks",
              "offset": 20,
              "slot": "102",
              "type": "t_uint32",
              "contract": "ArbAirdrop",
              "src": "contracts/ArbAirdrop.sol:14"
            },
            {
              "label": "merkleRoots",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint32,t_bytes32)",
              "contract": "ArbAirdrop",
              "src": "contracts/ArbAirdrop.sol:16"
            },
            {
              "label": "claimed",
              "offset": 0,
              "slot": "104",
              "type": "t_mapping(t_uint32,t_mapping(t_address,t_uint256))",
              "contract": "ArbAirdrop",
              "src": "contracts/ArbAirdrop.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_bytes32)": {
              "label": "mapping(uint32 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint32 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/BaseEngine.sol:BaseEngine": {
        "src": "contracts/BaseEngine.sol:19",
        "inherit": [
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [
          "getClearinghouse()",
          "getProductIds()",
          "getOrderbook(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/Clearinghouse.sol:Clearinghouse": {
        "src": "contracts/Clearinghouse.sol:25",
        "version": {
          "withMetadata": "257ebe05db2856b545662914f28a170a9f81f9e6aa773cedf1564b26bbb1530b",
          "withoutMetadata": "f95d2e6c1d3b908c424cca0a353d683e7c82b0c8c4b9266570abf53a721b9178",
          "linkedWithoutMetadata": "f95d2e6c1d3b908c424cca0a353d683e7c82b0c8c4b9266570abf53a721b9178"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/clearinghouse/IClearinghouse.sol:IClearinghouse",
          "contracts/interfaces/IVersion.sol:IVersion",
          "contracts/ClearinghouseStorage.sol:ClearinghouseStorage",
          "contracts/ClearinghouseRisk.sol:ClearinghouseRisk",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:IClearinghouseEventEmitter",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/ERC20Helper.sol:ERC20Helper",
          "contracts/libraries/MathHelper.sol:MathHelper",
          "contracts/libraries/RiskHelper.sol:RiskHelper"
        ],
        "methods": [
          "initialize(address,address,address,address)",
          "getQuote()",
          "getSupportedEngines()",
          "getEngineByType(uint8)",
          "getEngineByProduct(uint32)",
          "getOrderbook(uint32)",
          "getNumProducts()",
          "getInsurance()",
          "getHealth(bytes32,uint8)",
          "addEngine(address,uint8)",
          "modifyProductConfig(uint32,(int32,int32,int32,int32,int32))",
          "registerProductForId(address,(int32,int32,int32,int32,int32),uint32)",
          "depositCollateral((bytes32,uint32,uint128))",
          "depositInsurance((uint128))",
          "withdrawCollateral((bytes32,uint32,uint128,uint64))",
          "mintLp((bytes32,uint32,uint128,uint128,uint128,uint64))",
          "mintLpSlowMode((bytes32,uint32,uint128,uint128,uint128,uint64))",
          "burnLp((bytes32,uint32,uint128,uint64))",
          "burnLpAndTransfer((bytes32,uint32,uint128,bytes32))",
          "updateFeeRates((address,uint32,int64,int64))",
          "claimSequencerFees((bytes32),int128[])",
          "settlePnl((bytes32[],uint256[]))",
          "_isUnderInitial(bytes32)",
          "_isAboveInitial(bytes32)",
          "liquidateSubaccount((bytes32,bytes32,uint8,uint32,int128,uint64))",
          "upgradeClearinghouseLiq(address)",
          "getClearinghouseLiq()",
          "getAllBooks()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/Clearinghouse.sol:701"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "maxHealthGroup",
              "offset": 20,
              "slot": "101",
              "type": "t_uint32",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:17"
            },
            {
              "label": "healthGroups",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:18"
            },
            {
              "label": "risks",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:19"
            },
            {
              "label": "quote",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:9"
            },
            {
              "label": "clearinghouse",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:11"
            },
            {
              "label": "clearinghouseLiq",
              "offset": 0,
              "slot": "106",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:12"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "107",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:15"
            },
            {
              "label": "numProducts",
              "offset": 20,
              "slot": "107",
              "type": "t_uint32",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:18"
            },
            {
              "label": "productToEngine",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:21"
            },
            {
              "label": "engineByType",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:23"
            },
            {
              "label": "supportedEngines",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_enum(EngineType)21253)dyn_storage",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:25"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "111",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:28"
            },
            {
              "label": "lastLiquidationFees",
              "offset": 16,
              "slot": "111",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_enum(EngineType)21253)dyn_storage": {
              "label": "enum IProductEngine.EngineType[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IProductEngine)21361": {
              "label": "contract IProductEngine",
              "numberOfBytes": "20"
            },
            "t_enum(EngineType)21253": {
              "label": "enum IProductEngine.EngineType",
              "members": [
                "SPOT",
                "PERP"
              ],
              "numberOfBytes": "1"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_int32": {
              "label": "int32",
              "numberOfBytes": "4"
            },
            "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)": {
              "label": "mapping(enum IProductEngine.EngineType => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IProductEngine)21361)": {
              "label": "mapping(uint32 => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.HealthGroup)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.RiskStore)",
              "numberOfBytes": "32"
            },
            "t_struct(HealthGroup)21017_storage": {
              "label": "struct IClearinghouseState.HealthGroup",
              "members": [
                {
                  "label": "spotId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "perpId",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RiskStore)21012_storage": {
              "label": "struct IClearinghouseState.RiskStore",
              "members": [
                {
                  "label": "longWeightInitial",
                  "type": "t_int32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shortWeightInitial",
                  "type": "t_int32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "longWeightMaintenance",
                  "type": "t_int32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "shortWeightMaintenance",
                  "type": "t_int32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "largePositionPenalty",
                  "type": "t_int32",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/Clearinghouse.sol:IProxyManager": {
        "src": "contracts/Clearinghouse.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getProxyManagerHelper()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ClearinghouseLiq.sol:ClearinghouseLiq": {
        "src": "contracts/ClearinghouseLiq.sol:23",
        "version": {
          "withMetadata": "4feb9d9280e49291050cf24aa2927ccc821e758ba7a05f7fc86fd002b74a9e89",
          "withoutMetadata": "8e75f9c126a2ca75bc2a15c16c59b0d69b2897cae28272ee2477fff0f9ababdf",
          "linkedWithoutMetadata": "8e75f9c126a2ca75bc2a15c16c59b0d69b2897cae28272ee2477fff0f9ababdf"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/IVersion.sol:IVersion",
          "contracts/interfaces/clearinghouse/IClearinghouseLiq.sol:IClearinghouseLiq",
          "contracts/ClearinghouseStorage.sol:ClearinghouseStorage",
          "contracts/ClearinghouseRisk.sol:ClearinghouseRisk",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:IClearinghouseEventEmitter",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/MathHelper.sol:MathHelper"
        ],
        "methods": [
          "isUnderInitial(bytes32)",
          "isAboveInitial(bytes32)",
          "liquidateSubaccountImpl((bytes32,bytes32,uint8,uint32,int128,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "maxHealthGroup",
              "offset": 20,
              "slot": "101",
              "type": "t_uint32",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:17"
            },
            {
              "label": "healthGroups",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:18"
            },
            {
              "label": "risks",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:19"
            },
            {
              "label": "quote",
              "offset": 0,
              "slot": "104",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:9"
            },
            {
              "label": "clearinghouse",
              "offset": 0,
              "slot": "105",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:11"
            },
            {
              "label": "clearinghouseLiq",
              "offset": 0,
              "slot": "106",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:12"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "107",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:15"
            },
            {
              "label": "numProducts",
              "offset": 20,
              "slot": "107",
              "type": "t_uint32",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:18"
            },
            {
              "label": "productToEngine",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:21"
            },
            {
              "label": "engineByType",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:23"
            },
            {
              "label": "supportedEngines",
              "offset": 0,
              "slot": "110",
              "type": "t_array(t_enum(EngineType)21253)dyn_storage",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:25"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "111",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:28"
            },
            {
              "label": "lastLiquidationFees",
              "offset": 16,
              "slot": "111",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_enum(EngineType)21253)dyn_storage": {
              "label": "enum IProductEngine.EngineType[]",
              "numberOfBytes": "32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IProductEngine)21361": {
              "label": "contract IProductEngine",
              "numberOfBytes": "20"
            },
            "t_enum(EngineType)21253": {
              "label": "enum IProductEngine.EngineType",
              "members": [
                "SPOT",
                "PERP"
              ],
              "numberOfBytes": "1"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_int32": {
              "label": "int32",
              "numberOfBytes": "4"
            },
            "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)": {
              "label": "mapping(enum IProductEngine.EngineType => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IProductEngine)21361)": {
              "label": "mapping(uint32 => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.HealthGroup)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.RiskStore)",
              "numberOfBytes": "32"
            },
            "t_struct(HealthGroup)21017_storage": {
              "label": "struct IClearinghouseState.HealthGroup",
              "members": [
                {
                  "label": "spotId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "perpId",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RiskStore)21012_storage": {
              "label": "struct IClearinghouseState.RiskStore",
              "members": [
                {
                  "label": "longWeightInitial",
                  "type": "t_int32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shortWeightInitial",
                  "type": "t_int32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "longWeightMaintenance",
                  "type": "t_int32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "shortWeightMaintenance",
                  "type": "t_int32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "largePositionPenalty",
                  "type": "t_int32",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ClearinghouseRisk.sol:ClearinghouseRisk": {
        "src": "contracts/ClearinghouseRisk.sol:14",
        "inherit": [
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/RiskHelper.sol:RiskHelper",
          "contracts/libraries/MathHelper.sol:MathHelper"
        ],
        "methods": [
          "getMaxHealthGroup()",
          "getRisk(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "maxHealthGroup",
              "offset": 20,
              "slot": "101",
              "type": "t_uint32",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:17"
            },
            {
              "label": "healthGroups",
              "offset": 0,
              "slot": "102",
              "type": "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:18"
            },
            {
              "label": "risks",
              "offset": 0,
              "slot": "103",
              "type": "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)",
              "contract": "ClearinghouseRisk",
              "src": "contracts/ClearinghouseRisk.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int32": {
              "label": "int32",
              "numberOfBytes": "4"
            },
            "t_mapping(t_uint32,t_struct(HealthGroup)21017_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.HealthGroup)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(RiskStore)21012_storage)": {
              "label": "mapping(uint32 => struct IClearinghouseState.RiskStore)",
              "numberOfBytes": "32"
            },
            "t_struct(HealthGroup)21017_storage": {
              "label": "struct IClearinghouseState.HealthGroup",
              "members": [
                {
                  "label": "spotId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "perpId",
                  "type": "t_uint32",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(RiskStore)21012_storage": {
              "label": "struct IClearinghouseState.RiskStore",
              "members": [
                {
                  "label": "longWeightInitial",
                  "type": "t_int32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "shortWeightInitial",
                  "type": "t_int32",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "longWeightMaintenance",
                  "type": "t_int32",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "shortWeightMaintenance",
                  "type": "t_int32",
                  "offset": 12,
                  "slot": "0"
                },
                {
                  "label": "largePositionPenalty",
                  "type": "t_int32",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/ClearinghouseStorage.sol:ClearinghouseStorage": {
        "src": "contracts/ClearinghouseStorage.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "quote",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:9"
            },
            {
              "label": "clearinghouse",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:11"
            },
            {
              "label": "clearinghouseLiq",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:12"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:15"
            },
            {
              "label": "numProducts",
              "offset": 20,
              "slot": "3",
              "type": "t_uint32",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:18"
            },
            {
              "label": "productToEngine",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint32,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:21"
            },
            {
              "label": "engineByType",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:23"
            },
            {
              "label": "supportedEngines",
              "offset": 0,
              "slot": "6",
              "type": "t_array(t_enum(EngineType)21253)dyn_storage",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:25"
            },
            {
              "label": "insurance",
              "offset": 0,
              "slot": "7",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:28"
            },
            {
              "label": "lastLiquidationFees",
              "offset": 16,
              "slot": "7",
              "type": "t_int128",
              "contract": "ClearinghouseStorage",
              "src": "contracts/ClearinghouseStorage.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_enum(EngineType)21253)dyn_storage": {
              "label": "enum IProductEngine.EngineType[]",
              "numberOfBytes": "32"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IProductEngine)21361": {
              "label": "contract IProductEngine",
              "numberOfBytes": "20"
            },
            "t_enum(EngineType)21253": {
              "label": "enum IProductEngine.EngineType",
              "members": [
                "SPOT",
                "PERP"
              ],
              "numberOfBytes": "1"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_enum(EngineType)21253,t_contract(IProductEngine)21361)": {
              "label": "mapping(enum IProductEngine.EngineType => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IProductEngine)21361)": {
              "label": "mapping(uint32 => contract IProductEngine)",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/Endpoint.sol:Endpoint": {
        "src": "contracts/Endpoint.sol:24",
        "version": {
          "withMetadata": "ee09e5fc5ca1f22419af70d59dbbdca742dda0c773739f1b00610041910df0f0",
          "withoutMetadata": "1c567d1900c1647199a46fcd0665bf37bfa51e9d3f2ffd61f5cee316317b9abf",
          "linkedWithoutMetadata": "1c567d1900c1647199a46fcd0665bf37bfa51e9d3f2ffd61f5cee316317b9abf"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IEndpoint.sol:IEndpoint",
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [
          "contracts/libraries/ERC20Helper.sol:ERC20Helper",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "initialize(address,address,address,uint64,uint128,int128[])",
          "requireSubaccount(bytes32)",
          "depositCollateral(bytes12,uint32,uint128)",
          "depositCollateralWithReferral(bytes12,uint32,uint128,string)",
          "depositCollateralWithReferral(bytes32,uint32,uint128,string)",
          "submitSlowModeTransaction(bytes)",
          "executeSlowModeTransactions(uint32)",
          "processSlowModeTransaction(address,bytes)",
          "submitTransactions(bytes[])",
          "submitTransactionsChecked(uint64,bytes[])",
          "submitTransactionsCheckedWithGasLimit(uint64,bytes[],uint256)",
          "setBook(uint32,address)",
          "getBook(uint32)",
          "getSubaccountId(bytes32)",
          "getPriceX18(uint32)",
          "getPricesX18(uint32)",
          "getTime()",
          "setSequencer(address)",
          "getSequencer()",
          "getNonce(address)",
          "getLinkedSigner(bytes32)",
          "registerTransferableWallet(address,bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "quote",
              "offset": 0,
              "slot": "153",
              "type": "t_contract(IERC20Base)20131",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:27"
            },
            {
              "label": "clearinghouse",
              "offset": 0,
              "slot": "154",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:28"
            },
            {
              "label": "spotEngine",
              "offset": 0,
              "slot": "155",
              "type": "t_contract(ISpotEngine)21585",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:29"
            },
            {
              "label": "perpEngine",
              "offset": 0,
              "slot": "156",
              "type": "t_contract(IPerpEngine)21239",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:30"
            },
            {
              "label": "sanctions",
              "offset": 0,
              "slot": "157",
              "type": "t_contract(ISanctionsList)20736",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:31"
            },
            {
              "label": "sequencer",
              "offset": 0,
              "slot": "158",
              "type": "t_address",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:33"
            },
            {
              "label": "sequencerFees",
              "offset": 0,
              "slot": "159",
              "type": "t_int128",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:34"
            },
            {
              "label": "subaccountIds",
              "offset": 0,
              "slot": "160",
              "type": "t_mapping(t_bytes32,t_uint64)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:36"
            },
            {
              "label": "subaccounts",
              "offset": 0,
              "slot": "161",
              "type": "t_mapping(t_uint64,t_bytes32)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:37"
            },
            {
              "label": "numSubaccounts",
              "offset": 0,
              "slot": "162",
              "type": "t_uint64",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:38"
            },
            {
              "label": "pricesX18",
              "offset": 0,
              "slot": "163",
              "type": "t_mapping(t_uint32,t_struct(Prices)20401_storage)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:41"
            },
            {
              "label": "books",
              "offset": 0,
              "slot": "164",
              "type": "t_mapping(t_uint32,t_address)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:42"
            },
            {
              "label": "nonces",
              "offset": 0,
              "slot": "165",
              "type": "t_mapping(t_address,t_uint64)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:43"
            },
            {
              "label": "nSubmissions",
              "offset": 0,
              "slot": "166",
              "type": "t_uint64",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:45"
            },
            {
              "label": "slowModeConfig",
              "offset": 0,
              "slot": "167",
              "type": "t_struct(SlowModeConfig)20396_storage",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:47"
            },
            {
              "label": "slowModeTxs",
              "offset": 0,
              "slot": "168",
              "type": "t_mapping(t_uint64,t_struct(SlowModeTx)20389_storage)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:48"
            },
            {
              "label": "times",
              "offset": 0,
              "slot": "169",
              "type": "t_struct(Times)10407_storage",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:55"
            },
            {
              "label": "sequencerFee",
              "offset": 0,
              "slot": "170",
              "type": "t_mapping(t_uint32,t_int128)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:57"
            },
            {
              "label": "linkedSigners",
              "offset": 0,
              "slot": "171",
              "type": "t_mapping(t_bytes32,t_address)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:59"
            },
            {
              "label": "slowModeFees",
              "offset": 0,
              "slot": "172",
              "type": "t_int128",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:61"
            },
            {
              "label": "referralCodes",
              "offset": 0,
              "slot": "173",
              "type": "t_mapping(t_address,t_string_storage)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:64"
            },
            {
              "label": "transferableWallets",
              "offset": 0,
              "slot": "174",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "Endpoint",
              "src": "contracts/Endpoint.sol:67"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20Base)20131": {
              "label": "contract IERC20Base",
              "numberOfBytes": "20"
            },
            "t_contract(IPerpEngine)21239": {
              "label": "contract IPerpEngine",
              "numberOfBytes": "20"
            },
            "t_contract(ISanctionsList)20736": {
              "label": "contract ISanctionsList",
              "numberOfBytes": "20"
            },
            "t_contract(ISpotEngine)21585": {
              "label": "contract ISpotEngine",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint64)": {
              "label": "mapping(address => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint64)": {
              "label": "mapping(bytes32 => uint64)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_address)": {
              "label": "mapping(uint32 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_int128)": {
              "label": "mapping(uint32 => int128)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Prices)20401_storage)": {
              "label": "mapping(uint32 => struct IEndpoint.Prices)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_bytes32)": {
              "label": "mapping(uint64 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint64,t_struct(SlowModeTx)20389_storage)": {
              "label": "mapping(uint64 => struct IEndpoint.SlowModeTx)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Prices)20401_storage": {
              "label": "struct IEndpoint.Prices",
              "members": [
                {
                  "label": "spotPriceX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "perpPriceX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(SlowModeConfig)20396_storage": {
              "label": "struct IEndpoint.SlowModeConfig",
              "members": [
                {
                  "label": "timeout",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "txCount",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "txUpTo",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(SlowModeTx)20389_storage": {
              "label": "struct IEndpoint.SlowModeTx",
              "members": [
                {
                  "label": "executableAt",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sender",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "tx",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Times)10407_storage": {
              "label": "struct Endpoint.Times",
              "members": [
                {
                  "label": "perpTime",
                  "type": "t_uint128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "spotTime",
                  "type": "t_uint128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/EndpointGated.sol:EndpointGated": {
        "src": "contracts/EndpointGated.sol:11",
        "inherit": [
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [
          "setEndpoint(address)",
          "getEndpoint()",
          "getOraclePriceX18(uint32)",
          "getOraclePricesX18(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/FeeCalculator.sol:FeeCalculator": {
        "src": "contracts/FeeCalculator.sol:10",
        "version": {
          "withMetadata": "e6d7126704ffadc2206484051ce4724f08d2f77bf025b71afe45053765e606c6",
          "withoutMetadata": "9465845ef29664e20aa1cf0f979ac8583895d02d81e5bb912d183360c4b7917a",
          "linkedWithoutMetadata": "9465845ef29664e20aa1cf0f979ac8583895d02d81e5bb912d183360c4b7917a"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/IFeeCalculator.sol:IFeeCalculator",
          "contracts/interfaces/IVersion.sol:IVersion",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize()",
          "migrate(address)",
          "getClearinghouse()",
          "recordVolume(bytes32,uint128)",
          "getFeeFractionX18(bytes32,uint32,bool)",
          "getInterestFeeFractionX18(uint32)",
          "getLiquidationFeeFractionX18(bytes32,uint32)",
          "updateFeeRates(address,uint32,int64,int64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "clearinghouse",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "FeeCalculator",
              "src": "contracts/FeeCalculator.sol:11"
            },
            {
              "label": "feeRates",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(FeeRates)20543_storage))",
              "contract": "FeeCalculator",
              "src": "contracts/FeeCalculator.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_int64": {
              "label": "int64",
              "numberOfBytes": "8"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(FeeRates)20543_storage))": {
              "label": "mapping(address => mapping(uint32 => struct IFeeCalculator.FeeRates))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(FeeRates)20543_storage)": {
              "label": "mapping(uint32 => struct IFeeCalculator.FeeRates)",
              "numberOfBytes": "32"
            },
            "t_struct(FeeRates)20543_storage": {
              "label": "struct IFeeCalculator.FeeRates",
              "members": [
                {
                  "label": "makerRateX18",
                  "type": "t_int64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "takerRateX18",
                  "type": "t_int64",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "isNonDefault",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/MockSanctionsList.sol:MockSanctionsList": {
        "src": "contracts/MockSanctionsList.sol:4",
        "version": {
          "withMetadata": "a78c3552aaedb7b0db30bb5d3a44c3949b7e0700b7e17cbb8c63edc8a0c1cd18",
          "withoutMetadata": "1ae8c7fdafc79804df287a2081e9aae76148b3ad7fd6bb5bdd8e6ec2a9afc445",
          "linkedWithoutMetadata": "1ae8c7fdafc79804df287a2081e9aae76148b3ad7fd6bb5bdd8e6ec2a9afc445"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "isSanctioned(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/OffchainBook.sol:OffchainBook": {
        "src": "contracts/OffchainBook.sol:25",
        "version": {
          "withMetadata": "e346cdaa30a033053043006d4ef852e48dcffbad7af0f1927d7811c5e3dacf60",
          "withoutMetadata": "98410d6c8aee909d1949df7637fdf3b48c83a7bb0f0a2160c9135e11ca768570",
          "linkedWithoutMetadata": "98410d6c8aee909d1949df7637fdf3b48c83a7bb0f0a2160c9135e11ca768570"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/IOffchainBook.sol:IOffchainBook",
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "contracts/libraries/MathHelper.sol:MathHelper"
        ],
        "methods": [
          "initialize(address,address,address,address,address,uint32,int128,int128,int128,int128)",
          "modifyConfig(int128,int128,int128,int128)",
          "getMinSize()",
          "getDigest((bytes32,int128,int128,uint64,uint64))",
          "matchOrderAMM((uint32,int128,int128,((bytes32,int128,int128,uint64,uint64),bytes)),address)",
          "matchOrders(((uint32,bool,((bytes32,int128,int128,uint64,uint64),bytes),((bytes32,int128,int128,uint64,uint64),bytes)),address,address))",
          "swapAMM((bytes32,uint32,int128,int128))",
          "dumpFees()",
          "claimSequencerFee()",
          "getMarket()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "102",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "103",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "clearinghouse",
              "offset": 0,
              "slot": "154",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:33"
            },
            {
              "label": "engine",
              "offset": 0,
              "slot": "155",
              "type": "t_contract(IProductEngine)21361",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:34"
            },
            {
              "label": "fees",
              "offset": 0,
              "slot": "156",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:35"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "157",
              "type": "t_struct(Market)20641_storage",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:36"
            },
            {
              "label": "filledAmounts",
              "offset": 0,
              "slot": "160",
              "type": "t_mapping(t_bytes32,t_int128)",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:38"
            },
            {
              "label": "minSize",
              "offset": 0,
              "slot": "161",
              "type": "t_int128",
              "contract": "OffchainBook",
              "src": "contracts/OffchainBook.sol:39"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IProductEngine)21361": {
              "label": "contract IProductEngine",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_bytes32,t_int128)": {
              "label": "mapping(bytes32 => int128)",
              "numberOfBytes": "32"
            },
            "t_struct(Market)20641_storage": {
              "label": "struct IOffchainBook.Market",
              "members": [
                {
                  "label": "productId",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "sizeIncrement",
                  "type": "t_int128",
                  "offset": 4,
                  "slot": "0"
                },
                {
                  "label": "priceIncrementX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lpSpreadX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "collectedFees",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "sequencerFees",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/PerpEngine.sol:PerpEngine": {
        "src": "contracts/PerpEngine.sol:17",
        "version": {
          "withMetadata": "76ec069c6340593056acee4ca047fdda7169d11601a3fdef875e20b8610ecd6b",
          "withoutMetadata": "21c3bfe66774bc3bb7d00029f2840822ebb4135adc677d52ec027e0e4bdbd2d6",
          "linkedWithoutMetadata": "21c3bfe66774bc3bb7d00029f2840822ebb4135adc677d52ec027e0e4bdbd2d6"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/IVersion.sol:IVersion",
          "contracts/PerpEngineLp.sol:PerpEngineLp",
          "contracts/PerpEngineState.sol:PerpEngineState",
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/IPerpEngine.sol:IPerpEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/MathHelper.sol:MathHelper"
        ],
        "methods": [
          "initialize(address,address,address,address,address)",
          "getEngineType()",
          "addProduct(uint32,address,int128,int128,int128,int128,(int32,int32,int32,int32,int32))",
          "updateProduct(bytes)",
          "applyDeltas(struct IProductEngine.ProductDelta[])",
          "settlePnl(bytes32,uint256)",
          "getPositionPnl(uint32,bytes32)",
          "getSettlementState(uint32,bytes32)",
          "socializeSubaccount(bytes32,int128)",
          "manualAssert(int128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(State)21066_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:16"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:17"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_struct(LpState)21084_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:19"
            },
            {
              "label": "lpBalances",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balance)21073_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.Balance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LpBalance)21089_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.LpBalance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.Balance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.LpBalance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21084_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21066_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21073_storage": {
              "label": "struct IPerpEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "vQuoteBalance",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LpBalance)21089_storage": {
              "label": "struct IPerpEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21084_storage": {
              "label": "struct IPerpEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingPerLpX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "quote",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21066_storage": {
              "label": "struct IPerpEngine.State",
              "members": [
                {
                  "label": "cumulativeFundingLongX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingShortX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "availableSettle",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "openInterest",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/PerpEngineLp.sol:PerpEngineLp": {
        "src": "contracts/PerpEngineLp.sol:6",
        "inherit": [
          "contracts/PerpEngineState.sol:PerpEngineState",
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/IPerpEngine.sol:IPerpEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/MathHelper.sol:MathHelper",
          "contracts/libraries/RiskHelper.sol:RiskHelper"
        ],
        "methods": [
          "mintLp(uint32,bytes32,int128,int128,int128)",
          "burnLp(uint32,bytes32,int128)",
          "swapLp(uint32,int128,int128,int128,int128)",
          "swapLp(uint32,int128,int128)",
          "decomposeLps(bytes32,bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(State)21066_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:16"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:17"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_struct(LpState)21084_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:19"
            },
            {
              "label": "lpBalances",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balance)21073_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.Balance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LpBalance)21089_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.LpBalance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.Balance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.LpBalance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21084_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21066_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21073_storage": {
              "label": "struct IPerpEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "vQuoteBalance",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LpBalance)21089_storage": {
              "label": "struct IPerpEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21084_storage": {
              "label": "struct IPerpEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingPerLpX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "quote",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21066_storage": {
              "label": "struct IPerpEngine.State",
              "members": [
                {
                  "label": "cumulativeFundingLongX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingShortX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "availableSettle",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "openInterest",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/PerpEngineState.sol:PerpEngineState": {
        "src": "contracts/PerpEngineState.sol:13",
        "inherit": [
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/IPerpEngine.sol:IPerpEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [
          "getStateAndBalance(uint32,bytes32)",
          "getBalance(uint32,bytes32)",
          "getBalanceAmount(uint32,bytes32)",
          "hasBalance(uint32,bytes32)",
          "getStatesAndBalances(uint32,bytes32)",
          "getBalances(uint32,bytes32)",
          "getLpState(uint32)",
          "updateStates(uint128,int128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(State)21066_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:16"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:17"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_struct(LpState)21084_storage)",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:19"
            },
            {
              "label": "lpBalances",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))",
              "contract": "PerpEngineState",
              "src": "contracts/PerpEngineState.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balance)21073_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.Balance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(LpBalance)21089_storage)": {
              "label": "mapping(bytes32 => struct IPerpEngine.LpBalance)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balance)21073_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.Balance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(LpBalance)21089_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct IPerpEngine.LpBalance))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21084_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21066_storage)": {
              "label": "mapping(uint32 => struct IPerpEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21073_storage": {
              "label": "struct IPerpEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "vQuoteBalance",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(LpBalance)21089_storage": {
              "label": "struct IPerpEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21084_storage": {
              "label": "struct IPerpEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeFundingX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingPerLpX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "quote",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21066_storage": {
              "label": "struct IPerpEngine.State",
              "members": [
                {
                  "label": "cumulativeFundingLongX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeFundingShortX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "availableSettle",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "openInterest",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SanctionsList.sol:SanctionedList": {
        "src": "contracts/SanctionsList.sol:6",
        "version": {
          "withMetadata": "51103c09c22682392695c80fae17fca18abf15ffbb687638aa14da84c9b7f80c",
          "withoutMetadata": "ac101fb1aaa250e2d430cdea67ae56f6dea6765a6e276df36207fb672be76d1e",
          "linkedWithoutMetadata": "ac101fb1aaa250e2d430cdea67ae56f6dea6765a6e276df36207fb672be76d1e"
        },
        "inherit": [
          "contracts/interfaces/ISanctionsList.sol:ISanctionsList"
        ],
        "libraries": [],
        "methods": [
          "isSanctioned(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "sanctioned",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "SanctionedList",
              "src": "contracts/SanctionsList.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/Sequencer.sol:Sequencer": {
        "src": "contracts/Sequencer.sol:15",
        "version": {
          "withMetadata": "cc99cbc021ac586a9662e8a075bf9079d06a5cb201a2d479510c95b7eb0d7601",
          "withoutMetadata": "3feaa42657144eafb9d39a6ba59aee98c121e56c6a99f1146cb9923a118b0fc6",
          "linkedWithoutMetadata": "3feaa42657144eafb9d39a6ba59aee98c121e56c6a99f1146cb9923a118b0fc6"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/IVersion.sol:IVersion",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/ISequencer.sol:ISequencer"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "setEndpoint(address)",
          "submitTransactions(uint64,bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "_HASHED_NAME",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
            },
            {
              "label": "_HASHED_VERSION",
              "offset": 0,
              "slot": "2",
              "type": "t_bytes32",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EIP712Upgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "53",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "103",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "153",
              "type": "t_address",
              "contract": "Sequencer",
              "src": "contracts/Sequencer.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SpotEngine.sol:SpotEngine": {
        "src": "contracts/SpotEngine.sol:16",
        "version": {
          "withMetadata": "6c9d85c2842d4f4ca09f86b4d10c26e70348f155496baa92a0cf49490c8aa62e",
          "withoutMetadata": "7a943963706fcc61c97c4f2fb5bbfa614b301a81d4b9b42a90e4ee90d1f10df4",
          "linkedWithoutMetadata": "7a943963706fcc61c97c4f2fb5bbfa614b301a81d4b9b42a90e4ee90d1f10df4"
        },
        "inherit": [
          "contracts/Version.sol:Version",
          "contracts/interfaces/IVersion.sol:IVersion",
          "contracts/SpotEngineLP.sol:SpotEngineLP",
          "contracts/SpotEngineState.sol:SpotEngineState",
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/ISpotEngine.sol:ISpotEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [
          "initialize(address,address,address,address,address)",
          "getEngineType()",
          "getConfig(uint32)",
          "getWithdrawFee(uint32)",
          "addProduct(uint32,address,int128,int128,int128,int128,(address,int128,int128,int128,int128),(int32,int32,int32,int32,int32))",
          "updateProduct(bytes)",
          "applyDeltas(struct IProductEngine.ProductDelta[])",
          "assertUtilization(uint32)",
          "socializeSubaccount(bytes32)",
          "manualAssert(int128[],int128[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "configs",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(Config)21420_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:10"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_struct(State)21429_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:11"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:12"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_struct(LpState)21446_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:14"
            },
            {
              "label": "withdrawFees",
              "offset": 0,
              "slot": "111",
              "type": "t_mapping(t_uint32,t_int128)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balances)21456_storage)": {
              "label": "mapping(bytes32 => struct ISpotEngine.Balances)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_int128)": {
              "label": "mapping(uint32 => int128)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct ISpotEngine.Balances))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Config)21420_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.Config)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21446_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21429_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21434_storage": {
              "label": "struct ISpotEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(BalanceNormalized)21437_storage": {
              "label": "struct ISpotEngine.BalanceNormalized",
              "members": [
                {
                  "label": "amountNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Balances)21456_storage": {
              "label": "struct ISpotEngine.Balances",
              "members": [
                {
                  "label": "balance",
                  "type": "t_struct(BalanceNormalized)21437_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lpBalance",
                  "type": "t_struct(LpBalance)21449_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Config)21420_storage": {
              "label": "struct ISpotEngine.Config",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestInflectionUtilX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "interestFloorX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "interestSmallCapX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "interestLargeCapX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LpBalance)21449_storage": {
              "label": "struct ISpotEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21446_storage": {
              "label": "struct ISpotEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "quote",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21429_storage": {
              "label": "struct ISpotEngine.State",
              "members": [
                {
                  "label": "cumulativeDepositsMultiplierX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeBorrowsMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "totalDepositsNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalBorrowsNormalized",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SpotEngineLP.sol:SpotEngineLP": {
        "src": "contracts/SpotEngineLP.sol:7",
        "inherit": [
          "contracts/SpotEngineState.sol:SpotEngineState",
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/ISpotEngine.sol:ISpotEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/MathHelper.sol:MathHelper",
          "contracts/libraries/RiskHelper.sol:RiskHelper"
        ],
        "methods": [
          "mintLp(uint32,bytes32,int128,int128,int128)",
          "burnLp(uint32,bytes32,int128)",
          "swapLp(uint32,int128,int128,int128,int128)",
          "swapLp(uint32,int128,int128)",
          "decomposeLps(bytes32,bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "configs",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(Config)21420_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:10"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_struct(State)21429_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:11"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:12"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_struct(LpState)21446_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:14"
            },
            {
              "label": "withdrawFees",
              "offset": 0,
              "slot": "111",
              "type": "t_mapping(t_uint32,t_int128)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balances)21456_storage)": {
              "label": "mapping(bytes32 => struct ISpotEngine.Balances)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_int128)": {
              "label": "mapping(uint32 => int128)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct ISpotEngine.Balances))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Config)21420_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.Config)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21446_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21429_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21434_storage": {
              "label": "struct ISpotEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(BalanceNormalized)21437_storage": {
              "label": "struct ISpotEngine.BalanceNormalized",
              "members": [
                {
                  "label": "amountNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Balances)21456_storage": {
              "label": "struct ISpotEngine.Balances",
              "members": [
                {
                  "label": "balance",
                  "type": "t_struct(BalanceNormalized)21437_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lpBalance",
                  "type": "t_struct(LpBalance)21449_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Config)21420_storage": {
              "label": "struct ISpotEngine.Config",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestInflectionUtilX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "interestFloorX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "interestSmallCapX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "interestLargeCapX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LpBalance)21449_storage": {
              "label": "struct ISpotEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21446_storage": {
              "label": "struct ISpotEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "quote",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21429_storage": {
              "label": "struct ISpotEngine.State",
              "members": [
                {
                  "label": "cumulativeDepositsMultiplierX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeBorrowsMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "totalDepositsNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalBorrowsNormalized",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/SpotEngineState.sol:SpotEngineState": {
        "src": "contracts/SpotEngineState.sol:7",
        "inherit": [
          "contracts/BaseEngine.sol:BaseEngine",
          "contracts/EndpointGated.sol:EndpointGated",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interfaces/engine/ISpotEngine.sol:ISpotEngine",
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [
          "getStateAndBalance(uint32,bytes32)",
          "getBalance(uint32,bytes32)",
          "getBalanceAmount(uint32,bytes32)",
          "hasBalance(uint32,bytes32)",
          "getStatesAndBalances(uint32,bytes32)",
          "getBalances(uint32,bytes32)",
          "getLpState(uint32)",
          "updateStates(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ContextUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "51",
              "type": "t_address",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "52",
              "type": "t_array(t_uint256)49_storage",
              "contract": "OwnableUpgradeable",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
            },
            {
              "label": "endpoint",
              "offset": 0,
              "slot": "101",
              "type": "t_address",
              "contract": "EndpointGated",
              "src": "contracts/EndpointGated.sol:12"
            },
            {
              "label": "_clearinghouse",
              "offset": 0,
              "slot": "102",
              "type": "t_contract(IClearinghouse)20939",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:22"
            },
            {
              "label": "_fees",
              "offset": 0,
              "slot": "103",
              "type": "t_contract(IFeeCalculator)20599",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:23"
            },
            {
              "label": "productIds",
              "offset": 0,
              "slot": "104",
              "type": "t_array(t_uint32)dyn_storage",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:24"
            },
            {
              "label": "markets",
              "offset": 0,
              "slot": "105",
              "type": "t_mapping(t_uint32,t_contract(IOffchainBook)20726)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:27"
            },
            {
              "label": "canApplyDeltas",
              "offset": 0,
              "slot": "106",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "BaseEngine",
              "src": "contracts/BaseEngine.sol:30"
            },
            {
              "label": "configs",
              "offset": 0,
              "slot": "107",
              "type": "t_mapping(t_uint32,t_struct(Config)21420_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:10"
            },
            {
              "label": "states",
              "offset": 0,
              "slot": "108",
              "type": "t_mapping(t_uint32,t_struct(State)21429_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:11"
            },
            {
              "label": "balances",
              "offset": 0,
              "slot": "109",
              "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:12"
            },
            {
              "label": "lpStates",
              "offset": 0,
              "slot": "110",
              "type": "t_mapping(t_uint32,t_struct(LpState)21446_storage)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:14"
            },
            {
              "label": "withdrawFees",
              "offset": 0,
              "slot": "111",
              "type": "t_mapping(t_uint32,t_int128)",
              "contract": "SpotEngineState",
              "src": "contracts/SpotEngineState.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]",
              "numberOfBytes": "1568"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_array(t_uint32)dyn_storage": {
              "label": "uint32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IClearinghouse)20939": {
              "label": "contract IClearinghouse",
              "numberOfBytes": "20"
            },
            "t_contract(IFeeCalculator)20599": {
              "label": "contract IFeeCalculator",
              "numberOfBytes": "20"
            },
            "t_contract(IOffchainBook)20726": {
              "label": "contract IOffchainBook",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(Balances)21456_storage)": {
              "label": "mapping(bytes32 => struct ISpotEngine.Balances)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_contract(IOffchainBook)20726)": {
              "label": "mapping(uint32 => contract IOffchainBook)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_int128)": {
              "label": "mapping(uint32 => int128)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_mapping(t_bytes32,t_struct(Balances)21456_storage))": {
              "label": "mapping(uint32 => mapping(bytes32 => struct ISpotEngine.Balances))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(Config)21420_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.Config)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(LpState)21446_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.LpState)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint32,t_struct(State)21429_storage)": {
              "label": "mapping(uint32 => struct ISpotEngine.State)",
              "numberOfBytes": "32"
            },
            "t_struct(Balance)21434_storage": {
              "label": "struct ISpotEngine.Balance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastCumulativeMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(BalanceNormalized)21437_storage": {
              "label": "struct ISpotEngine.BalanceNormalized",
              "members": [
                {
                  "label": "amountNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Balances)21456_storage": {
              "label": "struct ISpotEngine.Balances",
              "members": [
                {
                  "label": "balance",
                  "type": "t_struct(BalanceNormalized)21437_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lpBalance",
                  "type": "t_struct(LpBalance)21449_storage",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Config)21420_storage": {
              "label": "struct ISpotEngine.Config",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "interestInflectionUtilX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "interestFloorX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                },
                {
                  "label": "interestSmallCapX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "interestLargeCapX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(LpBalance)21449_storage": {
              "label": "struct ISpotEngine.LpBalance",
              "members": [
                {
                  "label": "amount",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(LpState)21446_storage": {
              "label": "struct ISpotEngine.LpState",
              "members": [
                {
                  "label": "supply",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "quote",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "base",
                  "type": "t_struct(Balance)21434_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(State)21429_storage": {
              "label": "struct ISpotEngine.State",
              "members": [
                {
                  "label": "cumulativeDepositsMultiplierX18",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "cumulativeBorrowsMultiplierX18",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "totalDepositsNormalized",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "totalBorrowsNormalized",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/UsdtMock.sol:UsdtMock": {
        "src": "contracts/UsdtMock.sol:7",
        "version": {
          "withMetadata": "c2f7d8775df883f7bb305cc4504005030d049571174d61ddf64904a37354f24a",
          "withoutMetadata": "f408e3aa26a848379123e10f26112a3f985c67435df67bc522fd5149788c1881",
          "linkedWithoutMetadata": "f408e3aa26a848379123e10f26112a3f985c67435df67bc522fd5149788c1881"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UsdtMock",
            "src": "contracts/UsdtMock.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/Version.sol:Version": {
        "src": "contracts/Version.sol:7",
        "inherit": [
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [],
        "methods": [
          "getVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IArbAirdrop.sol:IArbAirdrop": {
        "src": "contracts/interfaces/IArbAirdrop.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claim(struct IArbAirdrop.ClaimProof[])",
          "getClaimed(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IERC20Base.sol:IERC20Base": {
        "src": "contracts/interfaces/IERC20Base.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IEndpoint.sol:IEndpoint": {
        "src": "contracts/interfaces/IEndpoint.sol:7",
        "inherit": [
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [],
        "methods": [
          "depositCollateral(bytes12,uint32,uint128)",
          "depositCollateralWithReferral(bytes12,uint32,uint128,string)",
          "depositCollateralWithReferral(bytes32,uint32,uint128,string)",
          "setBook(uint32,address)",
          "getBook(uint32)",
          "submitTransactionsChecked(uint64,bytes[])",
          "submitSlowModeTransaction(bytes)",
          "getPriceX18(uint32)",
          "getPricesX18(uint32)",
          "getTime()",
          "getNonce(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IEndpointGated.sol:IEndpointGated": {
        "src": "contracts/interfaces/IEndpointGated.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getOraclePriceX18(uint32)",
          "getOraclePricesX18(uint32)",
          "getEndpoint()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IFEndpoint.sol:IFEndpoint": {
        "src": "contracts/interfaces/IFEndpoint.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setPriceX18(uint32,int128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IFeeCalculator.sol:IFeeCalculator": {
        "src": "contracts/interfaces/IFeeCalculator.sol:5",
        "inherit": [
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [],
        "methods": [
          "getClearinghouse()",
          "migrate(address)",
          "recordVolume(bytes32,uint128)",
          "getFeeFractionX18(bytes32,uint32,bool)",
          "getInterestFeeFractionX18(uint32)",
          "getLiquidationFeeFractionX18(bytes32,uint32)",
          "updateFeeRates(address,uint32,int64,int64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IOffchainBook.sol:IOffchainBook": {
        "src": "contracts/interfaces/IOffchainBook.sol:8",
        "inherit": [
          "contracts/interfaces/IVersion.sol:IVersion"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address,uint32,int128,int128,int128,int128)",
          "modifyConfig(int128,int128,int128,int128)",
          "getMinSize()",
          "getDigest((bytes32,int128,int128,uint64,uint64))",
          "getMarket()",
          "swapAMM((bytes32,uint32,int128,int128))",
          "matchOrderAMM((uint32,int128,int128,((bytes32,int128,int128,uint64,uint64),bytes)),address)",
          "matchOrders(((uint32,bool,((bytes32,int128,int128,uint64,uint64),bytes),((bytes32,int128,int128,uint64,uint64),bytes)),address,address))",
          "dumpFees()",
          "claimSequencerFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/ISanctionsList.sol:ISanctionsList": {
        "src": "contracts/interfaces/ISanctionsList.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isSanctioned(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/ISequencer.sol:ISequencer": {
        "src": "contracts/interfaces/ISequencer.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/IVersion.sol:IVersion": {
        "src": "contracts/interfaces/IVersion.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVersion()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/clearinghouse/IClearinghouse.sol:IClearinghouse": {
        "src": "contracts/interfaces/clearinghouse/IClearinghouse.sol:11",
        "inherit": [
          "contracts/interfaces/IVersion.sol:IVersion",
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:IClearinghouseEventEmitter",
          "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState"
        ],
        "libraries": [],
        "methods": [
          "addEngine(address,uint8)",
          "registerProductForId(address,(int32,int32,int32,int32,int32),uint32)",
          "modifyProductConfig(uint32,(int32,int32,int32,int32,int32))",
          "depositCollateral((bytes32,uint32,uint128))",
          "withdrawCollateral((bytes32,uint32,uint128,uint64))",
          "mintLp((bytes32,uint32,uint128,uint128,uint128,uint64))",
          "mintLpSlowMode((bytes32,uint32,uint128,uint128,uint128,uint64))",
          "burnLp((bytes32,uint32,uint128,uint64))",
          "burnLpAndTransfer((bytes32,uint32,uint128,bytes32))",
          "liquidateSubaccount((bytes32,bytes32,uint8,uint32,int128,uint64))",
          "depositInsurance((uint128))",
          "settlePnl((bytes32[],uint256[]))",
          "updateFeeRates((address,uint32,int64,int64))",
          "claimSequencerFees((bytes32),int128[])",
          "getQuote()",
          "getSupportedEngines()",
          "getEngineByType(uint8)",
          "getEngineByProduct(uint32)",
          "getOrderbook(uint32)",
          "getNumProducts()",
          "getHealth(bytes32,uint8)",
          "getInsurance()",
          "getAllBooks()",
          "upgradeClearinghouseLiq(address)",
          "getClearinghouseLiq()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:IClearinghouseEventEmitter": {
        "src": "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/clearinghouse/IClearinghouseLiq.sol:IClearinghouseLiq": {
        "src": "contracts/interfaces/clearinghouse/IClearinghouseLiq.sol:10",
        "inherit": [
          "contracts/interfaces/IEndpointGated.sol:IEndpointGated",
          "contracts/interfaces/clearinghouse/IClearinghouseEventEmitter.sol:IClearinghouseEventEmitter",
          "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState"
        ],
        "libraries": [],
        "methods": [
          "liquidateSubaccountImpl((bytes32,bytes32,uint8,uint32,int128,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/clearinghouse/IClearinghouseState.sol:IClearinghouseState": {
        "src": "contracts/interfaces/clearinghouse/IClearinghouseState.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMaxHealthGroup()",
          "getRisk(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/engine/IPerpEngine.sol:IPerpEngine": {
        "src": "contracts/interfaces/engine/IPerpEngine.sol:7",
        "inherit": [
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [],
        "methods": [
          "getStateAndBalance(uint32,bytes32)",
          "getBalance(uint32,bytes32)",
          "hasBalance(uint32,bytes32)",
          "getStatesAndBalances(uint32,bytes32)",
          "getBalances(uint32,bytes32)",
          "getLpState(uint32)",
          "settlePnl(bytes32,uint256)",
          "getSettlementState(uint32,bytes32)",
          "updateStates(uint128,int128[])",
          "manualAssert(int128[])",
          "getPositionPnl(uint32,bytes32)",
          "socializeSubaccount(bytes32,int128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/engine/IProductEngine.sol:IProductEngine": {
        "src": "contracts/interfaces/engine/IProductEngine.sol:8",
        "inherit": [
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address,address)",
          "applyDeltas(struct IProductEngine.ProductDelta[])",
          "updateProduct(bytes)",
          "swapLp(uint32,int128,int128,int128,int128)",
          "swapLp(uint32,int128,int128)",
          "mintLp(uint32,bytes32,int128,int128,int128)",
          "burnLp(uint32,bytes32,int128)",
          "decomposeLps(bytes32,bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState": {
        "src": "contracts/interfaces/engine/IProductEngineState.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getClearinghouse()",
          "getProductIds()",
          "getEngineType()",
          "getOrderbook(uint32)",
          "getBalanceAmount(uint32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/interfaces/engine/ISpotEngine.sol:ISpotEngine": {
        "src": "contracts/interfaces/engine/ISpotEngine.sol:7",
        "inherit": [
          "contracts/interfaces/engine/IProductEngine.sol:IProductEngine",
          "contracts/interfaces/engine/IProductEngineState.sol:IProductEngineState"
        ],
        "libraries": [],
        "methods": [
          "getStateAndBalance(uint32,bytes32)",
          "getBalance(uint32,bytes32)",
          "hasBalance(uint32,bytes32)",
          "getStatesAndBalances(uint32,bytes32)",
          "getBalances(uint32,bytes32)",
          "getLpState(uint32)",
          "getConfig(uint32)",
          "getWithdrawFee(uint32)",
          "updateStates(uint128)",
          "manualAssert(int128[],int128[])",
          "socializeSubaccount(bytes32)",
          "assertUtilization(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/ERC20Helper.sol:ERC20Helper": {
        "src": "contracts/libraries/ERC20Helper.sol:9",
        "version": {
          "withMetadata": "4a37ff33be42d76ff1f4611a859d65ff83d2aeb56b392728019ef20094bb7961",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/Logger.sol:Logger": {
        "src": "contracts/libraries/Logger.sol:6",
        "version": {
          "withMetadata": "1179e971cf28df8eb753c512a8931d8eb701e8b4f333e091c540b9e911d58cb4",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/MathHelper.sol:MathHelper",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/MathHelper.sol:MathHelper": {
        "src": "contracts/libraries/MathHelper.sol:7",
        "version": {
          "withMetadata": "a1c3d00cab025b7cae3a60131639733aebfd617f01c4eff862ab3d989284817d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18",
          "contracts/libraries/MathHelper.sol:MathHelper"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/MathSD21x18.sol:MathSD21x18": {
        "src": "contracts/libraries/MathSD21x18.sol:6",
        "version": {
          "withMetadata": "d855b99b4dd383aa6fa62871bbc315ed59ce08581ed15b3f70bbe10a138b6f28",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "prb-math/contracts/PRBMathSD59x18.sol:PRBMathSD59x18"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/libraries/RiskHelper.sol:RiskHelper": {
        "src": "contracts/libraries/RiskHelper.sol:10",
        "version": {
          "withMetadata": "be344419d76dc9a86083633cb222ebf9ba298ecda8f342ec4df095dd1e608495",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/MathSD21x18.sol:MathSD21x18"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/util/ArbGasInfo.sol:ArbGasInfo": {
        "src": "contracts/util/ArbGasInfo.sol:4",
        "version": {
          "withMetadata": "0684a250fbeab5772496cb6eed1b5d842ea4537bcd8333eecc5034efa689d70e",
          "withoutMetadata": "adf3ae56e3311eb61c443a3704629a5731e9ce975646a0ba5a88f8a6213b8949",
          "linkedWithoutMetadata": "adf3ae56e3311eb61c443a3704629a5731e9ce975646a0ba5a88f8a6213b8949"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getL1BaseFeeEstimate()",
          "getPricesInWei()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "contracts/util/MockERC20.sol:MockERC20": {
        "src": "contracts/util/MockERC20.sol:6",
        "version": {
          "withMetadata": "3bc8d9a6275a7799e0f88e585b5d1b374a67d94674a1ae34d27a0f1b7fe43be6",
          "withoutMetadata": "2b3009279d998a04fffe384cd3b40d871f27dc8c58acfebeb1383e7743195331",
          "linkedWithoutMetadata": "2b3009279d998a04fffe384cd3b40d871f27dc8c58acfebeb1383e7743195331"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "mint(address,uint256)",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/util/MockERC20.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_decimals",
              "offset": 0,
              "slot": "5",
              "type": "t_uint8",
              "contract": "MockERC20",
              "src": "contracts/util/MockERC20.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "hardhat/console.sol:console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "5b038c93faef5316edee4dedaeb9e5d5dca1e0e5a1d01a0326c980c9ed9fcd5b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "prb-math/contracts/PRBMath.sol:PRBMath": {
        "src": "prb-math/contracts/PRBMath.sol:97",
        "version": {
          "withMetadata": "4a5826fee7b1bd5a9a4638ce9e3577d82d84ae3e8c4b06e37ffc0417de54ab69",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      },
      "prb-math/contracts/PRBMathSD59x18.sol:PRBMathSD59x18": {
        "src": "prb-math/contracts/PRBMathSD59x18.sol:12",
        "version": {
          "withMetadata": "02f14270af72180854a1fac5d2a31a5b74e93bb8f40f41ee26e5d7dd806f6fdb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "prb-math/contracts/PRBMath.sol:PRBMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.22"
      }
    }
  ]
}