/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ArbAirdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbAirdrop__factory>;
    getContractFactory(
      name: "BaseEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseEngine__factory>;
    getContractFactory(
      name: "Clearinghouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Clearinghouse__factory>;
    getContractFactory(
      name: "IProxyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyManager__factory>;
    getContractFactory(
      name: "ClearinghouseLiq",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClearinghouseLiq__factory>;
    getContractFactory(
      name: "ClearinghouseRisk",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClearinghouseRisk__factory>;
    getContractFactory(
      name: "ClearinghouseStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClearinghouseStorage__factory>;
    getContractFactory(
      name: "Endpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Endpoint__factory>;
    getContractFactory(
      name: "EndpointGated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EndpointGated__factory>;
    getContractFactory(
      name: "FeeCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCalculator__factory>;
    getContractFactory(
      name: "IClearinghouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearinghouse__factory>;
    getContractFactory(
      name: "IClearinghouseEventEmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearinghouseEventEmitter__factory>;
    getContractFactory(
      name: "IClearinghouseLiq",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearinghouseLiq__factory>;
    getContractFactory(
      name: "IClearinghouseState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearinghouseState__factory>;
    getContractFactory(
      name: "IPerpEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPerpEngine__factory>;
    getContractFactory(
      name: "IProductEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProductEngine__factory>;
    getContractFactory(
      name: "IProductEngineState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProductEngineState__factory>;
    getContractFactory(
      name: "ISpotEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISpotEngine__factory>;
    getContractFactory(
      name: "IArbAirdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbAirdrop__factory>;
    getContractFactory(
      name: "IEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEndpoint__factory>;
    getContractFactory(
      name: "IEndpointGated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEndpointGated__factory>;
    getContractFactory(
      name: "IERC20Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Base__factory>;
    getContractFactory(
      name: "IFeeCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeCalculator__factory>;
    getContractFactory(
      name: "IFEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFEndpoint__factory>;
    getContractFactory(
      name: "IOffchainBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOffchainBook__factory>;
    getContractFactory(
      name: "ISanctionsList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISanctionsList__factory>;
    getContractFactory(
      name: "IVersion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVersion__factory>;
    getContractFactory(
      name: "Logger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Logger__factory>;
    getContractFactory(
      name: "MockSanctionsList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSanctionsList__factory>;
    getContractFactory(
      name: "OffchainBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OffchainBook__factory>;
    getContractFactory(
      name: "PerpEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpEngine__factory>;
    getContractFactory(
      name: "PerpEngineLp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpEngineLp__factory>;
    getContractFactory(
      name: "PerpEngineState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpEngineState__factory>;
    getContractFactory(
      name: "SanctionedList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SanctionedList__factory>;
    getContractFactory(
      name: "Sequencer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sequencer__factory>;
    getContractFactory(
      name: "SpotEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotEngine__factory>;
    getContractFactory(
      name: "SpotEngineLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotEngineLP__factory>;
    getContractFactory(
      name: "SpotEngineState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotEngineState__factory>;
    getContractFactory(
      name: "UsdtMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsdtMock__factory>;
    getContractFactory(
      name: "ArbGasInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbGasInfo__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "Version",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Version__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ArbAirdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbAirdrop>;
    getContractAt(
      name: "BaseEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseEngine>;
    getContractAt(
      name: "Clearinghouse",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Clearinghouse>;
    getContractAt(
      name: "IProxyManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyManager>;
    getContractAt(
      name: "ClearinghouseLiq",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClearinghouseLiq>;
    getContractAt(
      name: "ClearinghouseRisk",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClearinghouseRisk>;
    getContractAt(
      name: "ClearinghouseStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ClearinghouseStorage>;
    getContractAt(
      name: "Endpoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Endpoint>;
    getContractAt(
      name: "EndpointGated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EndpointGated>;
    getContractAt(
      name: "FeeCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCalculator>;
    getContractAt(
      name: "IClearinghouse",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearinghouse>;
    getContractAt(
      name: "IClearinghouseEventEmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearinghouseEventEmitter>;
    getContractAt(
      name: "IClearinghouseLiq",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearinghouseLiq>;
    getContractAt(
      name: "IClearinghouseState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearinghouseState>;
    getContractAt(
      name: "IPerpEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPerpEngine>;
    getContractAt(
      name: "IProductEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProductEngine>;
    getContractAt(
      name: "IProductEngineState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProductEngineState>;
    getContractAt(
      name: "ISpotEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISpotEngine>;
    getContractAt(
      name: "IArbAirdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbAirdrop>;
    getContractAt(
      name: "IEndpoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEndpoint>;
    getContractAt(
      name: "IEndpointGated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEndpointGated>;
    getContractAt(
      name: "IERC20Base",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Base>;
    getContractAt(
      name: "IFeeCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeCalculator>;
    getContractAt(
      name: "IFEndpoint",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFEndpoint>;
    getContractAt(
      name: "IOffchainBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOffchainBook>;
    getContractAt(
      name: "ISanctionsList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISanctionsList>;
    getContractAt(
      name: "IVersion",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVersion>;
    getContractAt(
      name: "Logger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Logger>;
    getContractAt(
      name: "MockSanctionsList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSanctionsList>;
    getContractAt(
      name: "OffchainBook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OffchainBook>;
    getContractAt(
      name: "PerpEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpEngine>;
    getContractAt(
      name: "PerpEngineLp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpEngineLp>;
    getContractAt(
      name: "PerpEngineState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpEngineState>;
    getContractAt(
      name: "SanctionedList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SanctionedList>;
    getContractAt(
      name: "Sequencer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Sequencer>;
    getContractAt(
      name: "SpotEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotEngine>;
    getContractAt(
      name: "SpotEngineLP",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotEngineLP>;
    getContractAt(
      name: "SpotEngineState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotEngineState>;
    getContractAt(
      name: "UsdtMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UsdtMock>;
    getContractAt(
      name: "ArbGasInfo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbGasInfo>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "Version",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Version>;

    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ArbAirdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbAirdrop>;
    deployContract(
      name: "BaseEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEngine>;
    deployContract(
      name: "Clearinghouse",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clearinghouse>;
    deployContract(
      name: "IProxyManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxyManager>;
    deployContract(
      name: "ClearinghouseLiq",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseLiq>;
    deployContract(
      name: "ClearinghouseRisk",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseRisk>;
    deployContract(
      name: "ClearinghouseStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseStorage>;
    deployContract(
      name: "Endpoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Endpoint>;
    deployContract(
      name: "EndpointGated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointGated>;
    deployContract(
      name: "FeeCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeCalculator>;
    deployContract(
      name: "IClearinghouse",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouse>;
    deployContract(
      name: "IClearinghouseEventEmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseEventEmitter>;
    deployContract(
      name: "IClearinghouseLiq",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseLiq>;
    deployContract(
      name: "IClearinghouseState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseState>;
    deployContract(
      name: "IPerpEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPerpEngine>;
    deployContract(
      name: "IProductEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProductEngine>;
    deployContract(
      name: "IProductEngineState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProductEngineState>;
    deployContract(
      name: "ISpotEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISpotEngine>;
    deployContract(
      name: "IArbAirdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbAirdrop>;
    deployContract(
      name: "IEndpoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndpoint>;
    deployContract(
      name: "IEndpointGated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndpointGated>;
    deployContract(
      name: "IERC20Base",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Base>;
    deployContract(
      name: "IFeeCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeCalculator>;
    deployContract(
      name: "IFEndpoint",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFEndpoint>;
    deployContract(
      name: "IOffchainBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOffchainBook>;
    deployContract(
      name: "ISanctionsList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISanctionsList>;
    deployContract(
      name: "IVersion",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersion>;
    deployContract(
      name: "Logger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Logger>;
    deployContract(
      name: "MockSanctionsList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSanctionsList>;
    deployContract(
      name: "OffchainBook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OffchainBook>;
    deployContract(
      name: "PerpEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngine>;
    deployContract(
      name: "PerpEngineLp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngineLp>;
    deployContract(
      name: "PerpEngineState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngineState>;
    deployContract(
      name: "SanctionedList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SanctionedList>;
    deployContract(
      name: "Sequencer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sequencer>;
    deployContract(
      name: "SpotEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngine>;
    deployContract(
      name: "SpotEngineLP",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngineLP>;
    deployContract(
      name: "SpotEngineState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngineState>;
    deployContract(
      name: "UsdtMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UsdtMock>;
    deployContract(
      name: "ArbGasInfo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbGasInfo>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "Version",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Version>;

    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ArbAirdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbAirdrop>;
    deployContract(
      name: "BaseEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseEngine>;
    deployContract(
      name: "Clearinghouse",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Clearinghouse>;
    deployContract(
      name: "IProxyManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxyManager>;
    deployContract(
      name: "ClearinghouseLiq",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseLiq>;
    deployContract(
      name: "ClearinghouseRisk",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseRisk>;
    deployContract(
      name: "ClearinghouseStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ClearinghouseStorage>;
    deployContract(
      name: "Endpoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Endpoint>;
    deployContract(
      name: "EndpointGated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndpointGated>;
    deployContract(
      name: "FeeCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeCalculator>;
    deployContract(
      name: "IClearinghouse",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouse>;
    deployContract(
      name: "IClearinghouseEventEmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseEventEmitter>;
    deployContract(
      name: "IClearinghouseLiq",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseLiq>;
    deployContract(
      name: "IClearinghouseState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClearinghouseState>;
    deployContract(
      name: "IPerpEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPerpEngine>;
    deployContract(
      name: "IProductEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProductEngine>;
    deployContract(
      name: "IProductEngineState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProductEngineState>;
    deployContract(
      name: "ISpotEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISpotEngine>;
    deployContract(
      name: "IArbAirdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IArbAirdrop>;
    deployContract(
      name: "IEndpoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndpoint>;
    deployContract(
      name: "IEndpointGated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndpointGated>;
    deployContract(
      name: "IERC20Base",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Base>;
    deployContract(
      name: "IFeeCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeCalculator>;
    deployContract(
      name: "IFEndpoint",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFEndpoint>;
    deployContract(
      name: "IOffchainBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOffchainBook>;
    deployContract(
      name: "ISanctionsList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISanctionsList>;
    deployContract(
      name: "IVersion",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVersion>;
    deployContract(
      name: "Logger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Logger>;
    deployContract(
      name: "MockSanctionsList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSanctionsList>;
    deployContract(
      name: "OffchainBook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OffchainBook>;
    deployContract(
      name: "PerpEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngine>;
    deployContract(
      name: "PerpEngineLp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngineLp>;
    deployContract(
      name: "PerpEngineState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PerpEngineState>;
    deployContract(
      name: "SanctionedList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SanctionedList>;
    deployContract(
      name: "Sequencer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sequencer>;
    deployContract(
      name: "SpotEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngine>;
    deployContract(
      name: "SpotEngineLP",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngineLP>;
    deployContract(
      name: "SpotEngineState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotEngineState>;
    deployContract(
      name: "UsdtMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UsdtMock>;
    deployContract(
      name: "ArbGasInfo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbGasInfo>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;
    deployContract(
      name: "Version",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Version>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
