/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace RiskHelper {
  export type RiskStruct = {
    longWeightInitialX18: BigNumberish;
    shortWeightInitialX18: BigNumberish;
    longWeightMaintenanceX18: BigNumberish;
    shortWeightMaintenanceX18: BigNumberish;
    largePositionPenaltyX18: BigNumberish;
  };

  export type RiskStructOutput = [
    longWeightInitialX18: bigint,
    shortWeightInitialX18: bigint,
    longWeightMaintenanceX18: bigint,
    shortWeightMaintenanceX18: bigint,
    largePositionPenaltyX18: bigint
  ] & {
    longWeightInitialX18: bigint;
    shortWeightInitialX18: bigint;
    longWeightMaintenanceX18: bigint;
    shortWeightMaintenanceX18: bigint;
    largePositionPenaltyX18: bigint;
  };
}

export interface IClearinghouseStateInterface extends Interface {
  getFunction(
    nameOrSignature: "getMaxHealthGroup" | "getRisk"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMaxHealthGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRisk",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMaxHealthGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRisk", data: BytesLike): Result;
}

export interface IClearinghouseState extends BaseContract {
  connect(runner?: ContractRunner | null): IClearinghouseState;
  waitForDeployment(): Promise<this>;

  interface: IClearinghouseStateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMaxHealthGroup: TypedContractMethod<[], [bigint], "view">;

  getRisk: TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMaxHealthGroup"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRisk"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;

  filters: {};
}
