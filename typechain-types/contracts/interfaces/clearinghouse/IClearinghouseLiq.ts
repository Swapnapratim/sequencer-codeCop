/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IEndpoint {
  export type PricesStruct = {
    spotPriceX18: BigNumberish;
    perpPriceX18: BigNumberish;
  };

  export type PricesStructOutput = [
    spotPriceX18: bigint,
    perpPriceX18: bigint
  ] & { spotPriceX18: bigint; perpPriceX18: bigint };

  export type LiquidateSubaccountStruct = {
    sender: BytesLike;
    liquidatee: BytesLike;
    mode: BigNumberish;
    healthGroup: BigNumberish;
    amount: BigNumberish;
    nonce: BigNumberish;
  };

  export type LiquidateSubaccountStructOutput = [
    sender: string,
    liquidatee: string,
    mode: bigint,
    healthGroup: bigint,
    amount: bigint,
    nonce: bigint
  ] & {
    sender: string;
    liquidatee: string;
    mode: bigint;
    healthGroup: bigint;
    amount: bigint;
    nonce: bigint;
  };
}

export declare namespace RiskHelper {
  export type RiskStruct = {
    longWeightInitialX18: BigNumberish;
    shortWeightInitialX18: BigNumberish;
    longWeightMaintenanceX18: BigNumberish;
    shortWeightMaintenanceX18: BigNumberish;
    largePositionPenaltyX18: BigNumberish;
  };

  export type RiskStructOutput = [
    longWeightInitialX18: bigint,
    shortWeightInitialX18: bigint,
    longWeightMaintenanceX18: bigint,
    shortWeightMaintenanceX18: bigint,
    largePositionPenaltyX18: bigint
  ] & {
    longWeightInitialX18: bigint;
    shortWeightInitialX18: bigint;
    longWeightMaintenanceX18: bigint;
    shortWeightMaintenanceX18: bigint;
    largePositionPenaltyX18: bigint;
  };
}

export interface IClearinghouseLiqInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEndpoint"
      | "getMaxHealthGroup"
      | "getOraclePriceX18"
      | "getOraclePricesX18"
      | "getRisk"
      | "liquidateSubaccountImpl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClearinghouseInitialized"
      | "Liquidation"
      | "ModifyCollateral"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxHealthGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePricesX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRisk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateSubaccountImpl",
    values: [IEndpoint.LiquidateSubaccountStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHealthGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePricesX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateSubaccountImpl",
    data: BytesLike
  ): Result;
}

export namespace ClearinghouseInitializedEvent {
  export type InputTuple = [
    endpoint: AddressLike,
    quote: AddressLike,
    fees: AddressLike
  ];
  export type OutputTuple = [endpoint: string, quote: string, fees: string];
  export interface OutputObject {
    endpoint: string;
    quote: string;
    fees: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    liquidatorSubaccount: BytesLike,
    liquidateeSubaccount: BytesLike,
    mode: BigNumberish,
    healthGroup: BigNumberish,
    amount: BigNumberish,
    amountQuote: BigNumberish,
    insuranceCover: BigNumberish
  ];
  export type OutputTuple = [
    liquidatorSubaccount: string,
    liquidateeSubaccount: string,
    mode: bigint,
    healthGroup: bigint,
    amount: bigint,
    amountQuote: bigint,
    insuranceCover: bigint
  ];
  export interface OutputObject {
    liquidatorSubaccount: string;
    liquidateeSubaccount: string;
    mode: bigint;
    healthGroup: bigint;
    amount: bigint;
    amountQuote: bigint;
    insuranceCover: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyCollateralEvent {
  export type InputTuple = [
    amount: BigNumberish,
    subaccount: BytesLike,
    productId: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    subaccount: string,
    productId: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    subaccount: string;
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IClearinghouseLiq extends BaseContract {
  connect(runner?: ContractRunner | null): IClearinghouseLiq;
  waitForDeployment(): Promise<this>;

  interface: IClearinghouseLiqInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEndpoint: TypedContractMethod<[], [string], "view">;

  getMaxHealthGroup: TypedContractMethod<[], [bigint], "view">;

  getOraclePriceX18: TypedContractMethod<
    [productId: BigNumberish],
    [bigint],
    "view"
  >;

  getOraclePricesX18: TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;

  getRisk: TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;

  liquidateSubaccountImpl: TypedContractMethod<
    [tx: IEndpoint.LiquidateSubaccountStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMaxHealthGroup"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePriceX18"
  ): TypedContractMethod<[productId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePricesX18"
  ): TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRisk"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidateSubaccountImpl"
  ): TypedContractMethod<
    [tx: IEndpoint.LiquidateSubaccountStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClearinghouseInitialized"
  ): TypedContractEvent<
    ClearinghouseInitializedEvent.InputTuple,
    ClearinghouseInitializedEvent.OutputTuple,
    ClearinghouseInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "ModifyCollateral"
  ): TypedContractEvent<
    ModifyCollateralEvent.InputTuple,
    ModifyCollateralEvent.OutputTuple,
    ModifyCollateralEvent.OutputObject
  >;

  filters: {
    "ClearinghouseInitialized(address,address,address)": TypedContractEvent<
      ClearinghouseInitializedEvent.InputTuple,
      ClearinghouseInitializedEvent.OutputTuple,
      ClearinghouseInitializedEvent.OutputObject
    >;
    ClearinghouseInitialized: TypedContractEvent<
      ClearinghouseInitializedEvent.InputTuple,
      ClearinghouseInitializedEvent.OutputTuple,
      ClearinghouseInitializedEvent.OutputObject
    >;

    "Liquidation(bytes32,bytes32,uint8,uint32,int128,int128,int128)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "ModifyCollateral(int128,bytes32,uint32)": TypedContractEvent<
      ModifyCollateralEvent.InputTuple,
      ModifyCollateralEvent.OutputTuple,
      ModifyCollateralEvent.OutputObject
    >;
    ModifyCollateral: TypedContractEvent<
      ModifyCollateralEvent.InputTuple,
      ModifyCollateralEvent.OutputTuple,
      ModifyCollateralEvent.OutputObject
    >;
  };
}
