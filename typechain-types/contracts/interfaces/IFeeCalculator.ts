/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFeeCalculatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getClearinghouse"
      | "getFeeFractionX18"
      | "getInterestFeeFractionX18"
      | "getLiquidationFeeFractionX18"
      | "getVersion"
      | "migrate"
      | "recordVolume"
      | "updateFeeRates"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClearinghouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeFractionX18",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestFeeFractionX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationFeeFractionX18",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVolume",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRates",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getClearinghouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeFractionX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestFeeFractionX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationFeeFractionX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRates",
    data: BytesLike
  ): Result;
}

export interface IFeeCalculator extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeCalculator;
  waitForDeployment(): Promise<this>;

  interface: IFeeCalculatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getClearinghouse: TypedContractMethod<[], [string], "view">;

  getFeeFractionX18: TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish, taker: boolean],
    [bigint],
    "view"
  >;

  getInterestFeeFractionX18: TypedContractMethod<
    [productId: BigNumberish],
    [bigint],
    "view"
  >;

  getLiquidationFeeFractionX18: TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [bigint],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint], "view">;

  migrate: TypedContractMethod<
    [_clearinghouse: AddressLike],
    [void],
    "nonpayable"
  >;

  recordVolume: TypedContractMethod<
    [subaccount: BytesLike, quoteVolume: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFeeRates: TypedContractMethod<
    [
      user: AddressLike,
      productId: BigNumberish,
      makerRateX18: BigNumberish,
      takerRateX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getClearinghouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeFractionX18"
  ): TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish, taker: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInterestFeeFractionX18"
  ): TypedContractMethod<[productId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidationFeeFractionX18"
  ): TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[_clearinghouse: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordVolume"
  ): TypedContractMethod<
    [subaccount: BytesLike, quoteVolume: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeeRates"
  ): TypedContractMethod<
    [
      user: AddressLike,
      productId: BigNumberish,
      makerRateX18: BigNumberish,
      takerRateX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
