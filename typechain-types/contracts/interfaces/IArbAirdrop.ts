/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IArbAirdrop {
  export type ClaimProofStruct = {
    week: BigNumberish;
    totalAmount: BigNumberish;
    proof: BytesLike[];
  };

  export type ClaimProofStructOutput = [
    week: bigint,
    totalAmount: bigint,
    proof: string[]
  ] & { week: bigint; totalAmount: bigint; proof: string[] };
}

export interface IArbAirdropInterface extends Interface {
  getFunction(nameOrSignature: "claim" | "getClaimed"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ClaimArb"): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [IArbAirdrop.ClaimProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimed",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaimed", data: BytesLike): Result;
}

export namespace ClaimArbEvent {
  export type InputTuple = [
    account: AddressLike,
    week: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, week: bigint, amount: bigint];
  export interface OutputObject {
    account: string;
    week: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IArbAirdrop extends BaseContract {
  connect(runner?: ContractRunner | null): IArbAirdrop;
  waitForDeployment(): Promise<this>;

  interface: IArbAirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [claimProofs: IArbAirdrop.ClaimProofStruct[]],
    [void],
    "nonpayable"
  >;

  getClaimed: TypedContractMethod<[account: AddressLike], [bigint[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [claimProofs: IArbAirdrop.ClaimProofStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimed"
  ): TypedContractMethod<[account: AddressLike], [bigint[]], "view">;

  getEvent(
    key: "ClaimArb"
  ): TypedContractEvent<
    ClaimArbEvent.InputTuple,
    ClaimArbEvent.OutputTuple,
    ClaimArbEvent.OutputObject
  >;

  filters: {
    "ClaimArb(address,uint32,uint256)": TypedContractEvent<
      ClaimArbEvent.InputTuple,
      ClaimArbEvent.OutputTuple,
      ClaimArbEvent.OutputObject
    >;
    ClaimArb: TypedContractEvent<
      ClaimArbEvent.InputTuple,
      ClaimArbEvent.OutputTuple,
      ClaimArbEvent.OutputObject
    >;
  };
}
