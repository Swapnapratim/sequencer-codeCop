/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IEndpoint {
  export type OrderStruct = {
    sender: BytesLike;
    priceX18: BigNumberish;
    amount: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
  };

  export type OrderStructOutput = [
    sender: string,
    priceX18: bigint,
    amount: bigint,
    expiration: bigint,
    nonce: bigint
  ] & {
    sender: string;
    priceX18: bigint;
    amount: bigint;
    expiration: bigint;
    nonce: bigint;
  };

  export type PricesStruct = {
    spotPriceX18: BigNumberish;
    perpPriceX18: BigNumberish;
  };

  export type PricesStructOutput = [
    spotPriceX18: bigint,
    perpPriceX18: bigint
  ] & { spotPriceX18: bigint; perpPriceX18: bigint };

  export type SignedOrderStruct = {
    order: IEndpoint.OrderStruct;
    signature: BytesLike;
  };

  export type SignedOrderStructOutput = [
    order: IEndpoint.OrderStructOutput,
    signature: string
  ] & { order: IEndpoint.OrderStructOutput; signature: string };

  export type MatchOrderAMMStruct = {
    productId: BigNumberish;
    baseDelta: BigNumberish;
    quoteDelta: BigNumberish;
    taker: IEndpoint.SignedOrderStruct;
  };

  export type MatchOrderAMMStructOutput = [
    productId: bigint,
    baseDelta: bigint,
    quoteDelta: bigint,
    taker: IEndpoint.SignedOrderStructOutput
  ] & {
    productId: bigint;
    baseDelta: bigint;
    quoteDelta: bigint;
    taker: IEndpoint.SignedOrderStructOutput;
  };

  export type MatchOrdersStruct = {
    productId: BigNumberish;
    amm: boolean;
    taker: IEndpoint.SignedOrderStruct;
    maker: IEndpoint.SignedOrderStruct;
  };

  export type MatchOrdersStructOutput = [
    productId: bigint,
    amm: boolean,
    taker: IEndpoint.SignedOrderStructOutput,
    maker: IEndpoint.SignedOrderStructOutput
  ] & {
    productId: bigint;
    amm: boolean;
    taker: IEndpoint.SignedOrderStructOutput;
    maker: IEndpoint.SignedOrderStructOutput;
  };

  export type MatchOrdersWithSignerStruct = {
    matchOrders: IEndpoint.MatchOrdersStruct;
    takerLinkedSigner: AddressLike;
    makerLinkedSigner: AddressLike;
  };

  export type MatchOrdersWithSignerStructOutput = [
    matchOrders: IEndpoint.MatchOrdersStructOutput,
    takerLinkedSigner: string,
    makerLinkedSigner: string
  ] & {
    matchOrders: IEndpoint.MatchOrdersStructOutput;
    takerLinkedSigner: string;
    makerLinkedSigner: string;
  };

  export type SwapAMMStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amount: BigNumberish;
    priceX18: BigNumberish;
  };

  export type SwapAMMStructOutput = [
    sender: string,
    productId: bigint,
    amount: bigint,
    priceX18: bigint
  ] & { sender: string; productId: bigint; amount: bigint; priceX18: bigint };
}

export declare namespace IOffchainBook {
  export type MarketStruct = {
    productId: BigNumberish;
    sizeIncrement: BigNumberish;
    priceIncrementX18: BigNumberish;
    lpSpreadX18: BigNumberish;
    collectedFees: BigNumberish;
    sequencerFees: BigNumberish;
  };

  export type MarketStructOutput = [
    productId: bigint,
    sizeIncrement: bigint,
    priceIncrementX18: bigint,
    lpSpreadX18: bigint,
    collectedFees: bigint,
    sequencerFees: bigint
  ] & {
    productId: bigint;
    sizeIncrement: bigint;
    priceIncrementX18: bigint;
    lpSpreadX18: bigint;
    collectedFees: bigint;
    sequencerFees: bigint;
  };
}

export interface OffchainBookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimSequencerFee"
      | "clearinghouse"
      | "dumpFees"
      | "eip712Domain"
      | "engine"
      | "fees"
      | "filledAmounts"
      | "getDigest"
      | "getEndpoint"
      | "getMarket"
      | "getMinSize"
      | "getOraclePriceX18"
      | "getOraclePricesX18"
      | "getVersion"
      | "initialize"
      | "market"
      | "matchOrderAMM"
      | "matchOrders"
      | "modifyConfig"
      | "owner"
      | "renounceOwnership"
      | "setEndpoint"
      | "swapAMM"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "FillOrder"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimSequencerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearinghouse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dumpFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "engine", values?: undefined): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "filledAmounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDigest",
    values: [IEndpoint.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMinSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePricesX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchOrderAMM",
    values: [IEndpoint.MatchOrderAMMStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [IEndpoint.MatchOrdersWithSignerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAMM",
    values: [IEndpoint.SwapAMMStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimSequencerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearinghouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dumpFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "engine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDigest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePricesX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchOrderAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FillOrderEvent {
  export type InputTuple = [
    digest: BytesLike,
    subaccount: BytesLike,
    priceX18: BigNumberish,
    amount: BigNumberish,
    expiration: BigNumberish,
    nonce: BigNumberish,
    isTaker: boolean,
    feeAmount: BigNumberish,
    baseDelta: BigNumberish,
    quoteDelta: BigNumberish
  ];
  export type OutputTuple = [
    digest: string,
    subaccount: string,
    priceX18: bigint,
    amount: bigint,
    expiration: bigint,
    nonce: bigint,
    isTaker: boolean,
    feeAmount: bigint,
    baseDelta: bigint,
    quoteDelta: bigint
  ];
  export interface OutputObject {
    digest: string;
    subaccount: string;
    priceX18: bigint;
    amount: bigint;
    expiration: bigint;
    nonce: bigint;
    isTaker: boolean;
    feeAmount: bigint;
    baseDelta: bigint;
    quoteDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OffchainBook extends BaseContract {
  connect(runner?: ContractRunner | null): OffchainBook;
  waitForDeployment(): Promise<this>;

  interface: OffchainBookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimSequencerFee: TypedContractMethod<[], [bigint], "nonpayable">;

  clearinghouse: TypedContractMethod<[], [string], "view">;

  dumpFees: TypedContractMethod<[], [void], "nonpayable">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  engine: TypedContractMethod<[], [string], "view">;

  fees: TypedContractMethod<[], [string], "view">;

  filledAmounts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getDigest: TypedContractMethod<
    [order: IEndpoint.OrderStruct],
    [string],
    "view"
  >;

  getEndpoint: TypedContractMethod<[], [string], "view">;

  getMarket: TypedContractMethod<
    [],
    [IOffchainBook.MarketStructOutput],
    "view"
  >;

  getMinSize: TypedContractMethod<[], [bigint], "view">;

  getOraclePriceX18: TypedContractMethod<
    [productId: BigNumberish],
    [bigint],
    "view"
  >;

  getOraclePricesX18: TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _clearinghouse: AddressLike,
      _engine: AddressLike,
      _endpoint: AddressLike,
      _admin: AddressLike,
      _fees: AddressLike,
      _productId: BigNumberish,
      _sizeIncrement: BigNumberish,
      _priceIncrementX18: BigNumberish,
      _minSize: BigNumberish,
      _lpSpreadX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  market: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        productId: bigint;
        sizeIncrement: bigint;
        priceIncrementX18: bigint;
        lpSpreadX18: bigint;
        collectedFees: bigint;
        sequencerFees: bigint;
      }
    ],
    "view"
  >;

  matchOrderAMM: TypedContractMethod<
    [txn: IEndpoint.MatchOrderAMMStruct, takerLinkedSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  matchOrders: TypedContractMethod<
    [txn: IEndpoint.MatchOrdersWithSignerStruct],
    [void],
    "nonpayable"
  >;

  modifyConfig: TypedContractMethod<
    [
      _sizeIncrement: BigNumberish,
      _priceIncrementX18: BigNumberish,
      _minSize: BigNumberish,
      _lpSpreadX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEndpoint: TypedContractMethod<
    [_endpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  swapAMM: TypedContractMethod<
    [txn: IEndpoint.SwapAMMStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimSequencerFee"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "clearinghouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dumpFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "engine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "filledAmounts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDigest"
  ): TypedContractMethod<[order: IEndpoint.OrderStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<[], [IOffchainBook.MarketStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMinSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePriceX18"
  ): TypedContractMethod<[productId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePricesX18"
  ): TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _clearinghouse: AddressLike,
      _engine: AddressLike,
      _endpoint: AddressLike,
      _admin: AddressLike,
      _fees: AddressLike,
      _productId: BigNumberish,
      _sizeIncrement: BigNumberish,
      _priceIncrementX18: BigNumberish,
      _minSize: BigNumberish,
      _lpSpreadX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        productId: bigint;
        sizeIncrement: bigint;
        priceIncrementX18: bigint;
        lpSpreadX18: bigint;
        collectedFees: bigint;
        sequencerFees: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "matchOrderAMM"
  ): TypedContractMethod<
    [txn: IEndpoint.MatchOrderAMMStruct, takerLinkedSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "matchOrders"
  ): TypedContractMethod<
    [txn: IEndpoint.MatchOrdersWithSignerStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "modifyConfig"
  ): TypedContractMethod<
    [
      _sizeIncrement: BigNumberish,
      _priceIncrementX18: BigNumberish,
      _minSize: BigNumberish,
      _lpSpreadX18: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEndpoint"
  ): TypedContractMethod<[_endpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAMM"
  ): TypedContractMethod<[txn: IEndpoint.SwapAMMStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FillOrder"
  ): TypedContractEvent<
    FillOrderEvent.InputTuple,
    FillOrderEvent.OutputTuple,
    FillOrderEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FillOrder(bytes32,bytes32,int128,int128,uint64,uint64,bool,int128,int128,int128)": TypedContractEvent<
      FillOrderEvent.InputTuple,
      FillOrderEvent.OutputTuple,
      FillOrderEvent.OutputObject
    >;
    FillOrder: TypedContractEvent<
      FillOrderEvent.InputTuple,
      FillOrderEvent.OutputTuple,
      FillOrderEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
