/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArbGasInfo,
  ArbGasInfoInterface,
} from "../../../contracts/util/ArbGasInfo";

const _abi = [
  {
    inputs: [],
    name: "getL1BaseFeeEstimate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getPricesInWei",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060b48061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806341b247a8146037578063f5d6ded7146070575b600080fd5b60008080808080604080519687526020870195909552938501929092526060840152608083015260a082015260c0015b60405180910390f35b60405160008152602001606756fea2646970667358221220f0bf8730915c28bf319d399bf74288de22b2b3ae60dd8a15e8fe0da9dc38cf8064736f6c63430008160033";

type ArbGasInfoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbGasInfoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbGasInfo__factory extends ContractFactory {
  constructor(...args: ArbGasInfoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArbGasInfo & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArbGasInfo__factory {
    return super.connect(runner) as ArbGasInfo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbGasInfoInterface {
    return new Interface(_abi) as ArbGasInfoInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ArbGasInfo {
    return new Contract(address, _abi, runner) as unknown as ArbGasInfo;
  }
}
