/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SanctionedList,
  SanctionedListInterface,
} from "../../../contracts/SanctionsList.sol/SanctionedList";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "isSanctioned",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ce8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063df592f7d14602d575b600080fd5b60566038366004606a565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b600060208284031215607b57600080fd5b81356001600160a01b0381168114609157600080fd5b939250505056fea2646970667358221220e12b1de92e17eb9f01ca5dd1fccd0bcc4dd465b9119a452f6e4519500972eac664736f6c63430008160033";

type SanctionedListConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SanctionedListConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SanctionedList__factory extends ContractFactory {
  constructor(...args: SanctionedListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SanctionedList & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SanctionedList__factory {
    return super.connect(runner) as SanctionedList__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SanctionedListInterface {
    return new Interface(_abi) as SanctionedListInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SanctionedList {
    return new Contract(address, _abi, runner) as unknown as SanctionedList;
  }
}
