/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IEndpointGated,
  IEndpointGatedInterface,
} from "../../../contracts/interfaces/IEndpointGated";

const _abi = [
  {
    inputs: [],
    name: "getEndpoint",
    outputs: [
      {
        internalType: "address",
        name: "endpoint",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "productId",
        type: "uint32",
      },
    ],
    name: "getOraclePriceX18",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "healthGroup",
        type: "uint32",
      },
    ],
    name: "getOraclePricesX18",
    outputs: [
      {
        components: [
          {
            internalType: "int128",
            name: "spotPriceX18",
            type: "int128",
          },
          {
            internalType: "int128",
            name: "perpPriceX18",
            type: "int128",
          },
        ],
        internalType: "struct IEndpoint.Prices",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IEndpointGated__factory {
  static readonly abi = _abi;
  static createInterface(): IEndpointGatedInterface {
    return new Interface(_abi) as IEndpointGatedInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IEndpointGated {
    return new Contract(address, _abi, runner) as unknown as IEndpointGated;
  }
}
